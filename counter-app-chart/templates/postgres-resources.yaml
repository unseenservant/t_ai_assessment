# Persistent volumes and claims
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-data-pv
  labels:
    app: postgres
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "-5"
spec:
  storageClassName: standard
  capacity:
    storage: {{ .Values.postgres.persistence.size }}
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: {{ .Values.postgres.persistence.reclaimPolicy }}
  hostPath:
    path: "{{ .Values.postgres.persistence.path }}"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data-pvc
  labels:
    app: postgres
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "-4"
spec:
  storageClassName: standard
  volumeName: postgres-data-pv
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.postgres.persistence.size }}
---
# Config and secrets
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  labels:
    app: postgres
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "-3"
data:
  POSTGRES_DB: {{ .Values.database.name }}
  POSTGRES_USER: {{ .Values.database.user }}
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  labels:
    app: postgres
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "-3"
type: Opaque
data:
  POSTGRES_PASSWORD: {{ .Values.database.password | b64enc }}
---
# Postgres deployment and service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.postgres.name }}
  labels:
    app: postgres
  annotations:
    "helm.sh/hook-weight": "0"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: {{ .Values.postgres.name }}
          image: "{{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}"
          imagePullPolicy: {{ .Values.postgres.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.postgres.service.port }}
              name: postgres
          envFrom:
            - configMapRef:
                name: postgres-config
            - secretRef:
                name: postgres-secret
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-data
          resources:
            {{- toYaml .Values.postgres.resources | nindent 12 }}
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - {{ .Values.database.user }}
            initialDelaySeconds: {{ .Values.postgres.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.postgres.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.postgres.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.postgres.livenessProbe.failureThreshold }}
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - {{ .Values.database.user }}
            initialDelaySeconds: {{ .Values.postgres.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.postgres.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.postgres.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.postgres.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.postgres.readinessProbe.failureThreshold }}
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.postgres.name }}
  labels:
    app: postgres
spec:
  ports:
    - port: {{ .Values.postgres.service.port }}
      targetPort: {{ .Values.postgres.service.port }}
  selector:
    app: postgres
  type: ClusterIP