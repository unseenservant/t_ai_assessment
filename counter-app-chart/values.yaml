# Application configuration
app:
  name: counter-app
  replicaCount: 1
  image:
    repository: counter-app
    tag: latest
    pullPolicy: Never  # For local images
  service:
    type: NodePort
    port: 80
    targetPort: 5000
  # Rolling update strategy
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  # Pod Disruption Budget
  podDisruptionBudget:
    enabled: true
    minAvailable: 1
  resources:
    limits:
      cpu: 300m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  livenessProbe:
    path: /health
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    path: /health
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    successThreshold: 1
    failureThreshold: 3
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 80

# PostgreSQL configuration
postgres:
  name: postgres
  image:
    repository: postgres
    tag: "13"
    pullPolicy: IfNotPresent
  service:
    port: 5432
  persistence:
    size: 1Gi
    path: "/mnt/data/postgres"
    reclaimPolicy: Retain
  # Backup configuration
  backup:
    enabled: true
    schedule: "0 1 * * *"  # Daily at 1 AM
    retentionDays: 7
    storageClass: standard
    storage: 1Gi
    successfulJobsHistoryLimit: 3
    failedJobsHistoryLimit: 1
  # Pod Disruption Budget
  podDisruptionBudget:
    enabled: true
    minAvailable: 1
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  livenessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3
  
# Database configuration
database:
  name: counter_db
  user: postgres
  password: postgres  # In production, use Helm secrets or external secrets

# Network Policy configuration
networkPolicy:
  enabled: true

# Monitoring configuration
# Requires Prometheus Operator CRDs to be installed
monitoring:
  enabled: false
  serviceMonitor:
    interval: 15s
    scrapeTimeout: 10s
    labels:
      release: prometheus
  prometheusRule:
    labels:
      release: prometheus
  grafanaDashboard:
    labels:
      grafana_dashboard: "1"